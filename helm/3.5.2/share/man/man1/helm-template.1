.nh
.TH "HELM" "1" "Feb 2021" "Auto generated by spf13/cobra" ""

.SH NAME
.PP
helm\-template \- locally render templates


.SH SYNOPSIS
.PP
\fBhelm template [NAME] [CHART] [flags]\fP


.SH DESCRIPTION
.PP
Render chart templates locally and display the output.

.PP
Any values that would normally be looked up or retrieved in\-cluster will be
faked locally. Additionally, none of the server\-side testing of chart validity
(e.g. whether an API is supported) is done.


.SH OPTIONS
.PP
\fB\-a\fP, \fB\-\-api\-versions\fP=[]
	Kubernetes api versions used for Capabilities.APIVersions

.PP
\fB\-\-atomic\fP[=false]
	if set, the installation process deletes the installation on failure. The \-\-wait flag will be set automatically if \-\-atomic is used

.PP
\fB\-\-ca\-file\fP=""
	verify certificates of HTTPS\-enabled servers using this CA bundle

.PP
\fB\-\-cert\-file\fP=""
	identify HTTPS client using this SSL certificate file

.PP
\fB\-\-create\-namespace\fP[=false]
	create the release namespace if not present

.PP
\fB\-\-dependency\-update\fP[=false]
	run helm dependency update before installing the chart

.PP
\fB\-\-description\fP=""
	add a custom description

.PP
\fB\-\-devel\fP[=false]
	use development versions, too. Equivalent to version '>0.0.0\-0'. If \-\-version is set, this is ignored

.PP
\fB\-\-disable\-openapi\-validation\fP[=false]
	if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema

.PP
\fB\-\-dry\-run\fP[=false]
	simulate an install

.PP
\fB\-g\fP, \fB\-\-generate\-name\fP[=false]
	generate the name (and omit the NAME parameter)

.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
	help for template

.PP
\fB\-\-include\-crds\fP[=false]
	include CRDs in the templated output

.PP
\fB\-\-insecure\-skip\-tls\-verify\fP[=false]
	skip tls certificate checks for the chart download

.PP
\fB\-\-is\-upgrade\fP[=false]
	set .Release.IsUpgrade instead of .Release.IsInstall

.PP
\fB\-\-key\-file\fP=""
	identify HTTPS client using this SSL key file

.PP
\fB\-\-keyring\fP="/private/tmp/helm\-20210204\-99981\-1f8vc0y/.brew\_home/.gnupg/pubring.gpg"
	location of public keys used for verification

.PP
\fB\-\-name\-template\fP=""
	specify template used to name the release

.PP
\fB\-\-no\-hooks\fP[=false]
	prevent hooks from running during install

.PP
\fB\-\-output\-dir\fP=""
	writes the executed templates to files in output\-dir instead of stdout

.PP
\fB\-\-password\fP=""
	chart repository password where to locate the requested chart

.PP
\fB\-\-post\-renderer\fP=exec
	the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path

.PP
\fB\-\-release\-name\fP[=false]
	use release name in the output\-dir path.

.PP
\fB\-\-render\-subchart\-notes\fP[=false]
	if set, render subchart notes along with the parent

.PP
\fB\-\-replace\fP[=false]
	re\-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production

.PP
\fB\-\-repo\fP=""
	chart repository url where to locate the requested chart

.PP
\fB\-\-set\fP=[]
	set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)

.PP
\fB\-\-set\-file\fP=[]
	set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)

.PP
\fB\-\-set\-string\fP=[]
	set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)

.PP
\fB\-s\fP, \fB\-\-show\-only\fP=[]
	only show manifests rendered from the given templates

.PP
\fB\-\-skip\-crds\fP[=false]
	if set, no CRDs will be installed. By default, CRDs are installed if not already present

.PP
\fB\-\-skip\-tests\fP[=false]
	skip tests from templated output

.PP
\fB\-\-timeout\fP=5m0s
	time to wait for any individual Kubernetes operation (like Jobs for hooks)

.PP
\fB\-\-username\fP=""
	chart repository username where to locate the requested chart

.PP
\fB\-\-validate\fP[=false]
	validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install

.PP
\fB\-f\fP, \fB\-\-values\fP=[]
	specify values in a YAML file or a URL (can specify multiple)

.PP
\fB\-\-verify\fP[=false]
	verify the package before using it

.PP
\fB\-\-version\fP=""
	specify the exact chart version to use. If this is not specified, the latest version is used

.PP
\fB\-\-wait\fP[=false]
	if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as \-\-timeout

.PP
\fB\-\-wait\-for\-jobs\fP[=false]
	if set and \-\-wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as \-\-timeout


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB\-\-debug\fP[=false]
	enable verbose output

.PP
\fB\-\-kube\-apiserver\fP=""
	the address and the port for the Kubernetes API server

.PP
\fB\-\-kube\-as\-group\fP=[]
	group to impersonate for the operation, this flag can be repeated to specify multiple groups.

.PP
\fB\-\-kube\-as\-user\fP=""
	username to impersonate for the operation

.PP
\fB\-\-kube\-ca\-file\fP=""
	the certificate authority file for the Kubernetes API server connection

.PP
\fB\-\-kube\-context\fP=""
	name of the kubeconfig context to use

.PP
\fB\-\-kube\-token\fP=""
	bearer token used for authentication

.PP
\fB\-\-kubeconfig\fP=""
	path to the kubeconfig file

.PP
\fB\-n\fP, \fB\-\-namespace\fP=""
	namespace scope for this request

.PP
\fB\-\-registry\-config\fP="/private/tmp/helm\-20210204\-99981\-1f8vc0y/.brew\_home/Library/Preferences/helm/registry.json"
	path to the registry config file

.PP
\fB\-\-repository\-cache\fP="/private/tmp/helm\-20210204\-99981\-1f8vc0y/.brew\_home/Library/Caches/helm/repository"
	path to the file containing cached repository indexes

.PP
\fB\-\-repository\-config\fP="/private/tmp/helm\-20210204\-99981\-1f8vc0y/.brew\_home/Library/Preferences/helm/repositories.yaml"
	path to the file containing repository names and URLs


.SH SEE ALSO
.PP
\fBhelm(1)\fP


.SH HISTORY
.PP
4\-Feb\-2021 Auto generated by spf13/cobra
